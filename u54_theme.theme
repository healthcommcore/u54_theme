<?php
/**
 * @file
 * Bootstrap sub-theme.
 *
 * Place your custom PHP code in this file.
 */

/**
 * Implements hook_preprocess_page()
 */
function u54_theme_preprocess_page(&$vars) {
  $vars["#attached"]["library"][] = "u54_theme/u54_theme";
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $vars["#attached"]["library"][] = "u54_theme/hero-blur";
  }
}

function u54_theme_preprocess_page_title(&$vars) {
  $is_front = \Drupal::service('path.matcher')->isFrontPage();
  $is_resource = checkIfResource();
  $vars["is_front"] = $is_front;
  $vars["is_resource"] = $is_resource;

}

/**
 * Implements hook_preprocess_node__TYPE()
 *
 * Just a simple preprocessor to include a resource url
 * variable for use inside the node--resource.html.twig
 * template. Needed this to force the url field to be
 * structured as a link
 */
function u54_theme_preprocess_node__resource(&$vars) {
  $vars["resource_url"] = $vars["node"]->get("field_url")->value; 
}

function u54_theme_preprocess_item_list(&$vars) {
  $vars["is_search"] = ($vars["context"]["plugin"] == "node_search");
}

/**
 * Implements hook_preprocess_views_view()
 *
 */
function u54_theme_preprocess_views_view(&$vars) {
  $view = $vars["view"];
  $vars["total_results"] = getTotalResults($view);
  $vars["filter_terms"] = getFilterTerms($view);
  $vars["total_resources"] = getTotalResources();
}

function checkIfResource() {
  $is_resource = false;
  $node = getNode();
  if($node) {
    $label = $node->type->entity->label();
    $is_resource = ($label == "Resource");
  }
  return $is_resource;
}

function getNode() {
  return \Drupal::routeMatch()->getParameter('node');
}

function getTotalResources() {
  //$total = db_query("SELECT count(n.nid) FROM {node} AS n, {node_field_data} AS nfd WHERE n.nid = nfd.nid AND n.type='resource' AND nfd.status=1")->fetchField();
  $total = \Drupal::database()->query("SELECT count(n.nid) FROM {node} AS n, {node_field_data} AS nfd WHERE n.nid = nfd.nid AND n.type='resource' AND nfd.status=1")->fetchField();
  return $total;
}

function getTotalResults($view) {
  return $view->total_rows;
}

function getFilterTerms($view) {
  $term_arr = [];
  $inputs = $view->getExposedInput();
  if ( $inputs === null || count($inputs) == 0 ) {
    return;
  }
  foreach ($inputs as $key => $input) {
    foreach ($input as $tid) {
      $term = Drupal\taxonomy\Entity\Term::load($tid);
      $name = $term->getName();
      $term_arr[] = $name;
    }
  }
  if ( count($term_arr) > 1) {
    $last = count($term_arr) - 1;
    $end = "and " . $term_arr[$last];
    $term_arr[$last] = $end;
  }
  $terms = implode(", ", $term_arr);
  return $terms;
}

